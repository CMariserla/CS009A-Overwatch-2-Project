
# Collaborators: Chandrahaas Mariserla, Ryan Chiang

import csv
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

overwatchData = pd.read_csv("overwatch.csv")

#Question 1

def PickRate(overwatchData):
    heroList = []
    pickRate = []
    for i in range(0, len(overwatchData),8):
        heroList.append(overwatchData.iloc[i,0])
        pickRate.append(overwatchData.iloc[i,3])
    #adding data to two separate lists
    mostPicked = []
    for i in range(0,3):
        mostPicked.append(heroList[pickRate.index(max(pickRate))])
        pickRate.remove(max(pickRate))
        heroList.remove(heroList[pickRate.index(max(pickRate))])
    #adding top 3 played characters to a list
    return mostPicked

print(f"#1 Here are the Top 3 heroes with the highest pick-rate, descending: {PickRate(overwatchData)}.")

#Question 2

def Hit(overwatchData):
    hitlist = []
    hitnum = []
    projlist = []
    projnum = []
    hitscan = 0
    projectile = 0
    #iterating through data to get the name of each hero, as well as the corresponding pick-rate where the tier is titled 'all'. all if/elif statements are for hitscan.
    for i in range(0, len(overwatchData), 8):
        if overwatchData.iloc[i,0] == 'Ana':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Cassidy':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Widowmaker':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Soldier: 76':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'D.Va':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Ash':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Tracer':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Baptiste':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Sombra':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Sojourn':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Junker Queen':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Bastion':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Wrecking Ball':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        else: 
            #if not hitscan, then the other heroes are by logic projectile
            projlist.append(overwatchData.iloc[i, 0])
            projnum.append(float(overwatchData.iloc[i, 3]))
    #takes total of hitscan players pickrate and divides by count of hitscan players, giving hitscan the value of average pickrate
  
    for i in hitnum:
            hitscan += i
    hitscan = float(hitscan/(len(hitnum)))


    
    return hitscan

def Proj(overwatchData):
    hitlist = []
    hitnum = []
    projlist = []
    projnum = []
    hitscan = 0
    projectile = 0
    #same iteration for te file above, but to make returning values seprate as there are two functions, we opted to paste the same fucntion but return projectile instead of hitscan
    for i in range(0, len(overwatchData), 8):
        if overwatchData.iloc[i,0] == 'Ana':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Cassidy':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Widowmaker':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Soldier: 76':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'D.Va':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Ash':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Tracer':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Baptiste':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Sombra':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Sojourn':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Junker Queen':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Bastion':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        elif overwatchData.iloc[i,0] == 'Wrecking Ball':
            hitlist.append(overwatchData.iloc[i,0])
            hitnum.append(float(overwatchData.iloc[i, 3]))
        else: 
            projlist.append(overwatchData.iloc[i, 0])
            projnum.append(float(overwatchData.iloc[i, 3]))
    # does the same as the above function, but returns projectile
    for i in projnum:
            projectile += i

    projectile = float(projectile/(len(projnum)))


    
    return projectile

print(f"#2 AVG Hit-scan Hero Pick-Rate: {Hit(overwatchData):.2f}% and AVG Projectile Hero Pick Rate: {Proj(overwatchData):.2f}%.")


#QUESTION 3

def ElimRate(overwatchData):
    #similar to our first function, now trying to search for a different value for each hero thus the change in what we append to list.
    heroList = []
    elimRate = []
    for i in range(0, len(overwatchData),8):
        heroList.append(overwatchData.iloc[i,0])
        elimRate.append(overwatchData.iloc[i,5])
    #adding data to two separate lists
    mostElims = []
    for i in range(0,3):
        mostElims.append(heroList[elimRate.index(max(elimRate))])
        elimRate.remove(max(elimRate))
        heroList.remove(heroList[elimRate.index(max(elimRate))])
    #adding highest 3 elimination rate characters to a list
    return mostElims

print(f"#3 The 3 heroes associated with the highest elimination rate, descending, are:{ElimRate(overwatchData)}.")




#QUESTION 4


winrate_dict = {}
winrate_dict['Ana'] = 3
list = ['bob', 'lob']
for i in range(1, len(overwatchData), 8):
    winrate_dict[overwatchData.iloc[i,0]] = []
    winrate_dict[overwatchData.iloc[i,0]].append(overwatchData.iloc[i,4])
    #searching for bronze tier values, appending to the list created to hold multiple values for the hero key
for i in range(7, len(overwatchData), 8):
    #searching for grandmaster values, to append to key
    winrate_dict[overwatchData.iloc[i,0]].append(overwatchData.iloc[i,4])

x = []
y = []
for key in winrate_dict.keys():
    x.append(key)
    y.append(winrate_dict[key])

# Created legend in this manner as dictionary created to store heroes and the win rate of both tiers in nested lists, the label of what tier is what gave us trouble in creating a legend depsite trying plt.legend()
print("-------------------------------------")
print("               LEGEND                ")
print("                ~~~~                 ")
print("    GrandMaster WinRate : Orange     ")
print("                                     ")
print("     Bronze Tier WinRate : Blue      ")
print("                                     ")
print("-------------------------------------")
plt.figure(figsize=[40,6])
plt.plot(x, y)
plt.title("Win-Rates per Hero: Bronze vs GrandMaster Skill Tier", fontsize = 30)
plt.xlabel("Hero", fontsize = 19)
plt.ylabel("Win-Rate in Percent", fontsize = 20)



#plot for most elims question ( num4)